name: CI - Build & Health Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: db
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: 12345
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          cd backend
          docker build -t backend-api .

      - name: Run backend container with DB connection
        run: |
          docker run -d \
            --name backend-test \
            --env DATABASE_URL=postgresql://admin:12345@postgres:5432/db \
            -p 8000:8000 \
            --add-host=host.docker.internal:host-gateway \
            backend-api

      - name: Wait for health endpoint
        run: |
          for i in {1..100}; do
            sleep 2
            if curl -f http://localhost:8000/v1/health/ > /dev/null 2>&1; then
              echo "✅ Backend is up!"
              break
            else
              echo "⏳ Waiting for /v1/health/... ($i/30)"
            fi
          done

          if ! curl -f http://localhost:8000/v1/health/ > /dev/null 2>&1; then
            echo "❌ Health endpoint did not respond"
            exit 1
          fi

      - name: Validate health response
        run: |
          response=$(curl -s http://localhost:8000/v1/health/)
          echo "Response: $response"

          # Убедимся, что jq установлен
          sudo apt-get update && sudo apt-get install -y jq

          api_status=$(echo "$response" | jq -r '.api_status')
          db_status=$(echo "$response" | jq -r '.db_status')

          if [ "$api_status" != "health" ]; then
            echo "❌ API status is not 'health'"
            exit 1
          fi

          if [ "$db_status" != "health" ]; then
            echo "❌ DB status is not 'health'"
            exit 1
          fi

          echo "✅ All health checks passed!"

      - name: Cleanup
        if: always()
        run: |
          docker stop backend-test || true
          docker rm backend-test || true
